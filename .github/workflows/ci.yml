---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Pre-commit checks
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install pre-commit
        run: pip install pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files

  # Unit tests
  test:
    needs: pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Run tests
        run: |
          pip install pytest pytest-cov
          pytest --cov=src --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Docker build and test
  docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            token-classification-model:latest
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Build the image
          docker build -t test-model .

          # Test that the container can start and run basic commands
          docker run --rm test-model python -c \
            "import torch; print('PyTorch version:', torch.__version__)"
          docker run --rm test-model python -c \
            "from src.model import tokenize_and_align_labels; \
            print('Model import successful')"

          # Run tests inside container
          docker run --rm test-model pip install pytest
          docker run --rm test-model pytest tests/ -v

  # Model validation (lightweight)
  model-validation:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Basic model validation
        run: |
          python -c "
          # Test basic imports
          from src.model import tokenize_and_align_labels
          import torch
          print('Model imports successful')

          # Test transformers import
          from transformers import AutoTokenizer
          print('Transformers import successful')

          # Test version import
          from src import __version__
          print('Version: ' + str(__version__))

          # Test tensor operations
          x = torch.tensor([1, 2, 3])
          assert x.sum().item() == 6
          print('PyTorch tensor operations work')

          print('All basic validations passed!')
          "
